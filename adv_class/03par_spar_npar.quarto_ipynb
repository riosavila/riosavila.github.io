{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Semi- and Non- Parametric regression\"\n",
        "subtitle: \"How flexible is flexible enough?\"\n",
        "author: Fernando Rios-Avila\n",
        "format:\n",
        "  revealjs: \n",
        "    slide-number: true\n",
        "    width: 1600\n",
        "    height: 900\n",
        "    code-fold: true\n",
        "    echo: true\n",
        "    css: styles.css  \n",
        "  pdf: default  \n",
        "execute:\n",
        "  freeze: true   \n",
        "---\n",
        "\n",
        "\n",
        "## Introduction\n",
        "\n",
        "What exactly do we mean with non parametric??\n",
        "\n",
        "-   First of all, everything we have done in the last class, concerned to the analysis of parametric relationships between $y$ and $X's$ .\n",
        "\n",
        "-   Why parametric? Because we assume that the relationship between those variables is linear, so we just need to estimate the *parameters* of that relationship. ($\\beta's$). Even tho the CEF was on itself non-parametric.\n",
        "\n",
        "-   This was just a matter of convince. Instead of trying to estimate all possible conditional means (impossible task?) we impose functional form conditions, to identify the relationship of interest.\n",
        "\n",
        "-   When we covered MLE (last semester) we even imposed functional forms assumptions on relationships and distribution!\n",
        "\n",
        "##\n",
        "### So what about non-parametric?\n",
        "\n",
        "-   Non-parametric is on the other side of the spectrum. There are no \"single\" parameters to estimate, but rather it tries to be as flexible as possible, to identify all possible relationships in the data.\n",
        "\n",
        "-   In terms of distributions, it may no longer assumes data distributes as normal, poisson, exponential, etc. Instead, it simply assumes it distributes, however it does. ðŸ¤” But isnt that a problem?\n",
        "\n",
        "-   Yes it can be.\n",
        "\n",
        "    -   On the one hand Parametric modeling is very \"strict\" regarding functional forms. (linear quadratic, logs, etc).\n",
        "\n",
        "    -   On the other, Non-parametric can be too flexible. Making the problem almost impossible to solve.\n",
        "\n",
        "-   However, the benefits of letting your data \"speak\" for itself, would allow you to avoid some problems with parametric models. \n",
        "\n",
        "##\n",
        "### Ok but what about Semi-parametric! \n",
        "\n",
        "-   Semi-parametric models try to establish a mid point between parametric and non-parametric models, attempting to draw from the benefit of both.\n",
        "\n",
        "    -   It also helps that it has a smaller computational burden (we will see what do I mean with this).\n",
        "\n",
        "-   What about an example? Say we are trying to explain \"wages\" as a function of age and education. (assume exogeneity)\n",
        "\n",
        "##\n",
        "### \n",
        "\n",
        "$$\\begin{aligned}\n",
        "\\text{Theoretical framework :}wage &= g(age, education, \\varepsilon) \\\\ \\\\\n",
        "\\text{Parametric model: }wage &= b_0 + b_1 age + b_2 education +\\varepsilon \\\\ \\\\\n",
        "\\text{Non-parametric model: }wage &= g(age,education) +\\varepsilon\n",
        "\\\\ \\\\\n",
        "\\text{Semi-parametric model: } wage &= b_0 + g_1(age) + g_2(education) +\\varepsilon \\\\ \n",
        "wage &= g_0(age)+b1 education+\\varepsilon \\\\ \n",
        "wage &= g_0(age)+g_1 (age)education+\\varepsilon\n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "# Preliminaries\n",
        "\n",
        "## Step1: Estimation of Density functions {.scrollable}\n",
        "\n",
        "-   The first step towards learning non-parmetric analysis, is learning to use the most basic task of all.\n",
        "\n",
        "-   **Estimating distributions (PDFs)** : why? in economics, and other social sciences, we care about distributions!\n",
        "\n",
        "    Distribution of income, how many live under poverty, how much is concentrated among the rich, how skew the distribution is, what is the level of inequality, etc, etc\n",
        "\n",
        "-   The parametric approach to estimating distribution, is by using some predefined functional form (say normal), and use the data to estimate the parameters that define that distribution:\n",
        "\n",
        "$$\n",
        "\\hat f(x) = \\frac{1}{\\sqrt{2\\pi\\hat\\sigma^2}}exp \\left(-\\frac{1}{2}\\left(\\frac{x-\\hat \\mu}{\\hat \\sigma}\\right)^2 \\right)\n",
        "$$\n",
        "\n",
        "## \n",
        "\n",
        "-   Which can be done rather easy in `Stata`\n",
        "\n",
        "```stata\n",
        "frause oaxaca, clear\n",
        "drop if lnwage==.\n",
        "sum lnwage\n",
        "gen f = normalden(lnwage, r(mean), r(sd))\n",
        "histogram wages\n",
        "```\n",
        "\n",
        "![](resources/pdensity.png)\n",
        "\n",
        "But as you can see, it does not fit well.\n",
        "\n",
        "## Histogram \n",
        "\n",
        "Histograms are a type of non-parametric estimator that imposes no functional form restrictions to estimate **probability density functions (PDFs).**\n",
        "\n",
        "Construction histograms, is in fact, a fairly Straight forward task:\n",
        "\n",
        "1.  You select the width of bins, $h$ , and starting value $x_0$\n",
        "\n",
        "$$\\text{if } \\ x_i \\in [x_0 + m * h, x_0 + (m+1)h ) \\rightarrow \n",
        "bin(x_i)=m+1\n",
        "$$\n",
        "\n",
        "2.  And the Histogram estimator for density, is given by:\n",
        "\n",
        "$$\\hat f (x) = \\frac{1}{nh} \\sum_i 1(bin(x)=bin(x_i))\n",
        "$$\n",
        "\n",
        "Simple yet powerful, but sensitive to \"h\"\n",
        "\n",
        "##\n",
        "### Histograms with Varying h\n",
        "\n",
        "![](resources/hist_1.png)\n",
        "\n",
        "## Kernel density {.scrollable}\n",
        "\n",
        "An alternative to Histograms is known as the kernel density estimator.\n",
        "\n",
        "$$\n",
        "\\hat f(x) = \\frac{1}{nh}\\sum_i K\\left(\\frac{X_i-x}{h}\\right)\n",
        "$$\n",
        "\n",
        "where $K$ is what is known as a kernel function.\n",
        "\n",
        "##\n",
        "### Kernel function\n",
        "\n",
        "A Kernel function is such that has the following properties:\n",
        "\n",
        "$$\n",
        "\\int K(z)dz = 1 ; \\int zK(z)dz = 0 ; \\int z^2K(z)dz < \\infty\n",
        "$$\n",
        "\n",
        "Is a well behaved pdf on its own, that is symmetric, with defined second moment.\n",
        "\n",
        "> as with the histogram estimator, the Kden is just an average of functions, that has the advantage of being smooth.\n",
        ">\n",
        "> Although it also depends strongly, on the choice of bandwidth.\n",
        "\n",
        "##\n",
        "### Kernel density: Visualization \n",
        "\n",
        "![](resources/kden_2.png)\n",
        "\n",
        "## {.scrollable}\n",
        "### Code in `Stata`\n",
        "\n",
        "`histogram var [if] [weight]`\n",
        "\n",
        "`kdensity var [if] [weight]`\n"
      ],
      "id": "eaf90a50"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "*| classes: larger\n",
        "frause oaxaca, clear\n",
        "keep if lnwage!=.\n",
        "mata:\n",
        "    y = st_data(.,\"lnwage\")\n",
        "    fden = J(rows(y),1,0)\n",
        "    for(i=1; i<=rows(y); i++) {\n",
        "       fden[i] =mean(normalden(y, y[i], 0.08))\n",
        "    }\n",
        "    tg = fden,y\n",
        "end\n",
        "getmata tg* = tg"
      ],
      "id": "a5d8390f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "scatter tg1 tg2, name(mx, replace)"
      ],
      "id": "5b9b88cf",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Trade off: Bias vs variance {.scrollable}\n",
        "\n",
        "While these estimators are \"flexible\", there is one parameter that needs attention: The **bandwidth** $h$\n",
        "\n",
        "This parameter needs to be calibrated to balance two problems in Non-parametric analysis. Bias vs Variance:\n",
        "\n",
        "1.  when $h\\rightarrow 0$ , the bias of your estimator goes to zero ( in average). Intuitively $\\hat f(x)$ is constructed based on information that comes from $x$ alone.\n",
        "\n",
        "    But the variance increases! Because things will vary for every $x$.\n",
        "\n",
        "2.  when $h \\rightarrow \\infty$ , the bias increases, because you start using data that is very different to $x$ to estimate $\\hat f(x)$.\n",
        "\n",
        "    But variance decreases. Since the \"function\" is now very smooth (a line?)\n",
        "\n",
        "Thus, special attention is needed to choose the right h, which minimizes the problems (bias and variance).\n",
        "\n",
        "## Kdensity, Bias vs Variance\n",
        "\n",
        "![](resources/kden_3.png){fig-align=\"center\"}\n",
        "\n",
        "##\n",
        "### Other Considerations \n",
        "\n",
        "1.  As shown above, one needs to choose the bandwidth $h$ carefully, balancing the bias-variance trade off. Common approach is to simply use rule-of-thumb approaches to select this parameter:\n",
        "\n",
        "$$\n",
        "h = 1.059 \\sigma n ^ {-1/5} \\\\ h = 1.3643 * d * n ^ {-1/5} * min(\\sigma,iqr\\sigma)\n",
        "$$\n",
        "\n",
        "But other approaches may work better.\n",
        "\n",
        "##\n",
        "### Other Considerations \n",
        "\n",
        "2.  A second consideration is the choice of Kernel function! (`see help kdensity -> kernel`)\n",
        "    -   Although, except in few cases, the choice of bandwidth matters more than the kernel function.\n",
        "3.  This method works well when your data is smooth and continuous. But not so much for discrete data.\n",
        "    -   Nevertheless, it is still possible to use it with discrete data, and kernel weights!\n",
        "4.  Can be \"easily\" extended to multiple dimensions $f(x,y,z,...)$, including mixture of continuous and discrete data. You just multiple Kernels!\n",
        "    -   But, beware of Curse of dimensionality.\n",
        "    -   But still better than just Subsampling!\n",
        "\n",
        "## Kfunctions\n",
        "\n",
        "![](resources/image-893322693.png)\n",
        "\n",
        "# Non-parametric Regression\n",
        "\n",
        "![](resources/smreg_1.png)\n",
        "\n",
        "## NP - Regression\n",
        "\n",
        "-   As hinted from the beginning, the idea of non-parametric regressions is related to estimate a model that is as flexible as it can be.\n",
        "\n",
        "-   This relates to the CEF, where we want to estimate a conditional mean for every combination of X's. In other words, you aim to estimate models that are valid \"locally\". A very difficult task.\n",
        "\n",
        "    -   You have a limited sample size\n",
        "    -   You may not see all possible X's combinations\n",
        "    -   and for some, you may have micro-samples (n=1) Can you really do something with this?\n",
        "\n",
        "-   Yes, make your model flexible, but not overly flexible! but how?\n",
        "\n",
        "    -   Kernel regression ; Spline regression\n",
        "    -   Polynomial regression; Smoothed Spline regression.\n",
        "\n",
        "## Univariate case {.scrollable}\n",
        "\n",
        "-   Consider a univariate case $y,X$ where you only have 1 indep variable, which are related as follows:\n",
        "\n",
        "$$\n",
        "y = m(x) + e\n",
        "$$\n",
        "\n",
        "which imposes the ***simplifying*** assumption that error is additive.\n",
        "\n",
        "-   In the parametric case, you could model this as a linear relationship:\n",
        "\n",
        "$$\n",
        "y =b_0 + b_1 x + b_2 x^2 +b_3 x^3 +...+e\n",
        "$$\n",
        "\n",
        "(this is, in fact, starting to become less parametric)\n",
        "\n",
        "##\n",
        "\n",
        "-   But in the full (unconstrained) model it would just be the conditional mean:\n",
        "\n",
        "$$\n",
        "E(y|X) = \\hat m(x) = \\frac{\\sum y_i 1(x_i=x)}{\\sum 1(x_i=x)}\n",
        "$$\n",
        "\n",
        "Problems? Impossible to do out of sample predictions, and if $n<42$ inference would be extremely unreliable.\n",
        "\n",
        "## {.scrollable}\n",
        "### Local Constant Regression \n",
        "\n",
        "We can improve over the Unconstrained mean using the following connection:\n",
        "\n",
        "1.  $1(x_i=x)$ is a non-smooth indicator that shows if an observation is in-sample .\n",
        "\n",
        "2.  We can substitute this with a smooth indicator function\n",
        "\n",
        "$$\n",
        "K_w(x_i,x) = \\frac{K\\left(\\frac{x_i-x}{h}\\right)}{K(0)}\n",
        "$$\n",
        "\n",
        "Observations where $x_i=x$ will have a weight of 1, but depending on $h$, less weight is given the farther $x_i$ is to $x$.\n",
        "\n",
        "##\n",
        "\n",
        "This gives what is known as the Nadaraya-Watson or Local constant estimator:\n",
        "\n",
        "$$\n",
        "\\hat m(x) = \\frac{\\sum y_i K_w(x_i,x)}{\\sum K_w(x_i,x)} = \\sum y_i w_i\n",
        "$$\n",
        "\n",
        "Which, on its core, is simply a weighted regression, with weights given by $\\frac{K_w(x_i,x)}{\\sum K_w(x_i,x)}$\n",
        "\n",
        "Kernel Regressions \"borrows\" info from neighboring observations to obtain a smooth estimator.\n",
        "\n",
        "## \n",
        "### Visuals\n",
        "\n",
        "![](resources/smreg_2.png){fig-align=\"center\"}\n",
        "\n",
        "## {.scrollable}\n",
        "### Implementation\n"
      ],
      "id": "6d0f4000"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "webuse motorcycle, clear\n",
        "scatter accel time "
      ],
      "id": "df06f161",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "mata:\n",
        "    y = st_data(.,\"accel\")\n",
        "    x = st_data(.,\"time\")\n",
        "    yh = J(133,12,0)\n",
        "    for(k=1;k<=12;k=k++) {\n",
        "        for(i=1;i<=133;i++){\n",
        "            h = k/2\n",
        "            yh[i,k]=mean(y, normalden(x, x[i], h))\n",
        "        }\n",
        "    }    \n",
        "end\n",
        "getmata yh* = yh, replace\n",
        "color_style viridis\n",
        "two scatter accel time || line yh* time, xsize(7) ysize(5)"
      ],
      "id": "63fac6b5",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## {.scrollable}\n",
        "### Considerations \n",
        "\n",
        "1.  Local Constant estimator is simple to estimate with a single variable. Multiple variables is just as easy:\n",
        "\n",
        "$$\n",
        "\\hat m(x,z) = \\frac{\\sum y_i K_h(x_i,x) \\times K_h(z_i,z)}{\\sum K_h(x_i,x) \\times K_h(z_i,z)}\n",
        "$$\n",
        "\n",
        "The problem, however, lies on the curse of dimensionality. \n",
        "\n",
        "More dimensions, less data per $(x,z)$ point, unless you \"increase\" bandwidths.\n",
        "\n",
        "2.  As before, it all depends on the Bandwidth $h$, which determines the \"flexibility\" of the model.\n",
        "\n",
        "3.  The local constant tends to have considerable bias (specially near limits of the distribution, or when $g$ has too much curvature)\n",
        "\n",
        "##\n",
        "### Choosing h\n",
        "\n",
        "The quality of the NPK regression depends strongly on the choice of $h$. And as with density estimation, the choice translates into a tradeoff between bias and variance of the estimation.\n",
        "\n",
        "There are various approaches to choose $h$. Some which depend strongly on the dimensionality of the model.\n",
        "\n",
        "For Example, `Stata` command `lpoly` estimates local constant models, using the following:\n",
        "\n",
        "![](resources/image-1628248108.png){fig-align=\"center\" width=\"100\"}\n",
        "\n",
        "But that is not the only approach.\n",
        "\n",
        "An alternative (used for regularization) is using Cross-Validaton. (a method to evaluate the predictive power of a model)\n",
        "\n",
        "## Cross Validation: Intuition {.scrollable}\n",
        "\n",
        "1.  Separate your data in two parts: Training and testing Sample.\n",
        "\n",
        "2.  Estimate your model in the TrainS, and evaluate predictive power in TestS.\n",
        "\n",
        "3.  To obtain a full view of predictive power, Repeat the process rotating the training set\n",
        "\n",
        "$$\n",
        "mse = \\frac{1}{N}\\sum(y_i - g_{-k}(x))^2 \n",
        "$$\n",
        "\n",
        "This should give you a better idea of the predictive power of the model.\n",
        "\n",
        "![](resources/image-1717331850.png){width=\"800\"}\n",
        "\n",
        "\n",
        "## {.scrollable}\n",
        "###  Cross-validation in `Stata` \n",
        "\n",
        "```stata{.larger}\n",
        "\n",
        "frause oaxaca, clear\n",
        "ssc install cv_kfold\n",
        "\n",
        "qui:reg lnwage educ exper tenure female age\n",
        "\n",
        "cv_kfold\n",
        "k-fold Cross validation\n",
        "Number of Folds     :          5\n",
        "Number of Repetions :          1\n",
        "Avg Root Mean SE    :    0.45838\n",
        "\n",
        "qui:reg lnwage c.(educ exper tenure female age)\n",
        "               ##c.(educ exper tenure female age)\n",
        "\n",
        "cv_kfold\n",
        "k-fold Cross validation\n",
        "Number of Folds     :          5\n",
        "Number of Repetions :          1\n",
        "Avg Root Mean SE    :    0.42768\n",
        "\n",
        ". qui:reg lnwage c.(educ exper tenure female age)\n",
        "                 ##c.(educ exper tenure female age)\n",
        "                 ##c.(educ exper tenure female age)\n",
        "\n",
        ". cv_kfold\n",
        "k-fold Cross validation\n",
        "Number of Folds     :          5\n",
        "Number of Repetions :          1\n",
        "Avg Root Mean SE    :    0.43038\n",
        "\n",
        "ssc install cv_regress\n",
        "* Does lOOCV for regression\n",
        "cv_regress\n",
        "\n",
        "Leave-One-Out Cross-Validation Results \n",
        "-----------------------------------------\n",
        "         Method          |    Value\n",
        "-------------------------+---------------\n",
        "Root Mean Squared Errors |       0.4244\n",
        "Log Mean Squared Errors  |      -1.7144\n",
        "Mean Absolute Errors     |       0.2895\n",
        "Pseudo-R2                |      0.36344\n",
        "-----------------------------------------\n",
        "```\n",
        "\n",
        "## LOOCV {.scrollable}\n",
        "\n",
        "Because the \"choice\" of \"folds\" and Repetitions, and the randomness, may produce different results every-time, one also has the option of using the \"leave-one-out\" approach.\n",
        "\n",
        "This means, leave one observation out, and use the rest to make the predictions.\n",
        "\n",
        "$$\n",
        "CV(h) = n^{-1}\\sum_{i=1}^n(y_i - \\hat g_{-i}(x_i))^2\n",
        "$$\n",
        "\n",
        "This is not as bad as it looks, since we can use the shortcut\n",
        "\n",
        "$$\n",
        "CV(h) = n^{-1}\\sum_{i=1}^n\\left(\\frac{y_i - \\hat g(x_i)}{1-w_i/\\Sigma w_j}\\right)^2\n",
        "$$\n",
        "\n",
        "In `Stata`, the command `npregress kernel` uses this type of cross-validation to determine \"optimal\" $h$\n",
        "\n",
        "```stata\n",
        "lpoly y x, kernel(gaussian) nodraw\n",
        "display r(bwidth)\n",
        ".23992564\n",
        "npregress kernel y x, estimator(constant) noderiv\n",
        ". Bandwidth\n",
        "-------------------------\n",
        "             |      Mean \n",
        "-------------+-----------\n",
        "           x |  .4064052 \n",
        "-------------------------\n",
        "```\n",
        "\n",
        "## Extending from constant to Polynomial {.scrollable}\n",
        "\n",
        "An alternative way to understanding the simple NW (local constant) regressions, is to understand it as a local regression model with anything but a constant:\n",
        "\n",
        "$$\n",
        "\\hat m(x)=min\\sum(y_i - \\beta_0)^2 w(x,h)_i\n",
        "$$\n",
        "\n",
        "This means that you could extend the analogy and include \"centered\" polynomials to the model.\n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "min &\\sum(y_i - \\beta_0 - \\beta_1 (x_i -x) -\\beta_2 (x_i - x) ^2 - ...-\\beta_k(x_i-x)^k)^2 w(x,h)_i \\\\\n",
        "\\hat m(x) &= \\hat \\beta_0\n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "This is called the local polynomial regression.\n",
        "\n",
        "-   Because its more flexible, it shows less bias when the true function shows a lot of variation.\n",
        "\n",
        "-   Because of added polynomials, it requires more information (larger $h$)\n",
        "\n",
        "-   It can be used to easily obtain local marginal effects.\n",
        "\n",
        "-   And can also be used with multinomial models (local planes)\n",
        "\n",
        "$$min \\sum (y_i - \\beta_0 - \\beta_1 (x_i-x) - \\beta_2 (z_i-z))^2 w(x,z,h)\n",
        "$$\n",
        "\n",
        "## Local Constant to Local Polynomial {.scrollable}\n",
        "\n",
        "::: columns\n",
        "::: {.column width=\"40%\"}\n",
        "```stata\n",
        "webuse motorcycle\n",
        "two scatter accel time || ///\n",
        "lpoly accel time , degree(0) n(100) || ///\n",
        "lpoly accel time , degree(1) n(100) || ///\n",
        "lpoly accel time , degree(2) n(100) || ///\n",
        "lpoly accel time , degree(3) n(100) , ///\n",
        "legend(order(2 \"LConstant\" 3 \"Local Linear\" ///\n",
        "4 \"Local Cubic\" 5 \"Local Quartic\"))\n",
        "```\n",
        ":::\n",
        "\n",
        "::: {.column width=\"60%\"}\n",
        "![](resources/lllreg.png)\n",
        ":::\n",
        ":::\n",
        "\n",
        "## Statistical Inference {.scrollable}\n",
        "\n",
        "For Statistical Inference, since each regression is just a linear model, standard errors can be obtained using the criteria as in Lecture 1. (Robust, Clustered, bootstrapped).\n",
        "\n",
        "-   With perhaps one caveat. Local estimation and standard errors may need to be estimated \"globally\", rather than locally.\n",
        "\n",
        "The estimation of marginal effects becomes a bit more problematic.\n",
        "\n",
        "-   Local marginal effects are straightforward (when local linear or higher local polynomial is used)\n",
        "\n",
        "-   Global marginal effects, can be obtained averaging all local marginal effects.\n",
        "\n",
        "-   However, asymptotic standard errors are difficult to obtain (consider the multiple correlated components), but bootstrapping is still possible.\n",
        "\n",
        "## `Stata` Example {.scrollable}\n",
        "\n",
        "```stata\n",
        "frause oaxaca\n",
        "npregress kernel lnwage age exper\n",
        "\n",
        "Computing mean function\n",
        "  \n",
        "Minimizing cross-validation function:\n",
        "Iteration 6:   Cross-validation criterion = -1.5912075  \n",
        "  \n",
        "Computing optimal derivative bandwidth\n",
        "Iteration 3:   Cross-validation criterion =  .00196371  \n",
        "\n",
        "Bandwidth\n",
        "------------------------------------\n",
        "             |      Mean     Effect \n",
        "-------------+----------------------\n",
        "         age |  2.843778   15.10978 \n",
        "       exper |  3.113587   16.54335 \n",
        "------------------------------------\n",
        "\n",
        "Local-linear regression                    Number of obs      =          1,434\n",
        "Kernel   : epanechnikov                    E(Kernel obs)      =          1,434\n",
        "Bandwidth: cross-validation                R-squared          =         0.3099\n",
        "------------------------------------------------------------------------------\n",
        "      lnwage |   Estimate\n",
        "-------------+----------------------------------------------------------------\n",
        "Mean         |\n",
        "      lnwage |   3.339269\n",
        "-------------+----------------------------------------------------------------\n",
        "Effect       |\n",
        "         age |   .0169326\n",
        "       exper |  -.0010196\n",
        "------------------------------------------------------------------------------\n",
        "Note: Effect estimates are averages of derivatives.\n",
        "Note: You may compute standard errors using vce(bootstrap) or reps().\n",
        "```\n",
        "\n",
        "## Other types of \"non-parametric\" models\n",
        "\n",
        "We have explored the basic version of **non-parametric** modeling. But its not the only one.\n",
        "\n",
        "There are at least two others that are *easy* to implement.\n",
        "\n",
        "1.  Nonparametric Series Regression (we will see this)\n",
        "2.  Smoothing series/splines: Which borrows from Series regression and Ridge Regression.\n",
        "\n",
        "## Non-parametric series {.scrollable}\n",
        "\n",
        "This approach assumes that model flexibility can achieve by using \"basis\" functions in combination with Interactions, but using \"global\" regressions (OLS)\n",
        "\n",
        "But what are \"basis\" functions? They are a collection of terms that approximates smooth functions arbitrarily well.\n",
        "\n",
        "$$\n",
        "\\begin{aligned}\n",
        "y &= m(x,z)+e  \\\\\n",
        "m(x,z)  &= B(x)+ B(z)+B(x)*B(z)  \\\\\n",
        "B(x)  &= (x, x^2, x^3,...) \\\\\n",
        "B(x)  & = fracPoly \\\\ \n",
        "B(x)  &= (x, max(0,x-c_1), max(0,x-c_2), ... \\\\\n",
        "B(x)  &= (x,x^2,max(0,x-c_1)^2, max(0,x-c_2)^2, ... \\\\\n",
        "B(x)  &= B-splines \n",
        "\\end{aligned}\n",
        "$$\n",
        "\n",
        "##\n",
        "\n",
        "-   Polynomials can be used, but there may be problems with high order polynomials. (*Runge's phenomenon,multiple-co-linearity*). They are \"global\" estimators.\n",
        "\n",
        "-   Fractional polynomials: More flexible than polynomials, without producing \"waves\" on the predictions\n",
        "\n",
        "-   Natural Splines, are better at capturing smooth transitions (depending on degree). Require choosing Knots appropriately.\n",
        "\n",
        "-   B-splines are similar to N-splines, but with better stat properties. Also require choosing knots\n",
        "\n",
        "Except for correctly estimating the Bases functions (fracpoly and Bsplines are not straight forward), estimation requires simple OLS.\n",
        "\n",
        "## NP series - tuning\n",
        "\n",
        "-   While NP-series are easy to estimate, we also need to address problems of over-fitting.\n",
        "\n",
        "-   With Polynomial: What degree of polynomial is correct? What about the degree of the interactions?\n",
        "\n",
        "-   Fractional Polynomials: How many terms are needed, what would their \"degrees\" be.\n",
        "\n",
        "-   Nsplines, Bsplines: How to choose degree? and where to set the knots?\n",
        "\n",
        "These questions are similar to the choosing $h$ in kernel regressions. However, model choice is simple...Cross validation.\n",
        "\n",
        "> Estimate a model under different specifications (cut offs), and compare the out-of-sample predictive power. (`see Stata: cv_kfold or cv_regress`)\n",
        "\n",
        "One more problem left. Statistical Inference\n",
        "\n",
        "## NP series - SE and Mfx {.scrollable}\n",
        "\n",
        "Lecture 1 applies here. Once the model has been chosen, you can estimate SE using appropriate methods. There is only one caveat\n",
        "\n",
        "-   Standard SE estimation ignores the uncertainty of choosing cut-offs or polynomial degrees. In principle, cut-offs uncertainty can be modeled. But requires non-linear estimation.\n",
        "\n",
        "Marginal effects are somewhat easier for some basis. Just take derivatives:\n",
        "\n",
        "$$\n",
        "y = b_0 + b_1 x + b_2 x^2 +b_3 max(0,x-c)^2 + e \\\\\n",
        "\\frac{dy}{dx}=b_1 + 2 b_2 x + 2 b_3 (x-c) 1(x>c)\n",
        "$$\n",
        "\n",
        "-   But keeping track of derivatives in a multivariate model is difficult, and often, the functions are hard to track down. so how to implement it?\n",
        "\n",
        "## NP series: Implementation marginal effects {.scrollable}\n",
        "\n",
        "As always, it all depends on how are the models estimated.\n",
        "\n",
        "-   `Stata` command `npregress series` allows you to estimate this type of models using polynomials, splines and B-splines. And also allows estimates marginal effects for you. (can be slow)\n",
        "\n",
        "-   `fp` estimates fractional polynomials, but does not estimate marginal effects for you.\n",
        "\n",
        "-   In `Stata`, you can use the package `f_able` to estimate those marginal effects, however. see [here](https://journals.sagepub.com/doi/pdf/10.1177/1536867X211000005) for details. and `SSC` for the latest update.\n",
        "\n",
        "```stata\n",
        "frause oaxaca, clear\n",
        "drop agesq\n",
        "f_spline age = age, nk(1) degree(3)\n",
        "f_spline exper = exper, nk(1) degree(3)\n",
        "qui:regress lnwage c.(age*)##c.(exper*)\n",
        "f_able age? exper?, auto \n",
        "margins, dydx(age exper) noestimcheck \n",
        "\n",
        "------------------------------------------------------------------------------\n",
        "             |            Delta-method\n",
        "             |      dy/dx   std. err.      z    P>|z|     [95% conf. interval]\n",
        "-------------+----------------------------------------------------------------\n",
        "         age |   .0360234   .0033909    10.62   0.000     .0293775    .0426694\n",
        "       exper |   .0082594   .0050073     1.65   0.099    -.0015547    .0180735\n",
        "------------------------------------------------------------------------------\n",
        "```\n",
        "\n",
        "## Semiparametric Regressions\n",
        "\n",
        "-   Full non-parametric estimations are powerful to identify very flexible functional forms. To avoid overfitting, however, one must choose tuning parameters appropriately ($h$ and $cutoffs$ ).\n",
        "\n",
        "-   A disadvantage: Curse of dimensionality. More variables need more data to provide good results. But, the more data you have, the more difficult to estimate (computing time).\n",
        "\n",
        "-   It also becomes extremly difficult to interpret. (too much flexibility)\n",
        "\n",
        "-   An alternative, Use the best of both worlds: Semiparametric regression\n",
        "\n",
        "    -   Flexibility when needed with the structure of standard regressions, to avoid the downfalls of fully nonparametric models\n",
        "\n",
        "## Partially Linear model {.scrollable}\n",
        "\n",
        "$$\n",
        "y = x\\beta +g(z) +e\n",
        "$$\n",
        "\n",
        "This model assumes that only a smaller set of covariates need to be estimated non-parametrically in the model.\n",
        "\n",
        "Estimators:\n",
        "\n",
        "-   `npregress series`: Use Basis to estimate $g(z)$ \n",
        "   \n",
        "-   Yatchew 1997: For a single z, sort variables by it, and estimate: $\\Delta y=\\Delta X\\beta+ \\Delta g(z) + \\Delta e$. This works because $\\Delta g(z)\\rightarrow 0$\n",
        "\n",
        "    Estimate $g(z)$ regressing $y-x\\hat \\beta$ on $z$. See [plreg](https://journals.sagepub.com/doi/pdf/10.1177/1536867X0600600306)\n",
        "\n",
        "-   Robinson 1988: Application of FWL. Estimate $y = g_y(z)+e_y$ and $x = g_x(z)+e_x$ and estimate $\\beta = (e_x ' e_x)^{-1} e_x ' e_y$ . For $g(z)$ same as before. See [semipar](https://journals.sagepub.com/doi/pdf/10.1177/1536867X1201200411).\n",
        "\n",
        "-   Other methods available see [semi_stata](https://www.stata.com/meeting/uk13/abstracts/materials/uk13_verardi.pdf)\n",
        "\n",
        "## Generalized Additive model\n",
        "\n",
        "$$\n",
        "y = g(x) +g(z)+e\n",
        "$$\n",
        "\n",
        "This model assumes the effect of X and Z (or any other variables) are additive separable, and may have a nonlinear effect on y.\n",
        "\n",
        "-   `npregress series`: with non-interaction option. Fractional polynomials `mfp`, cubic splines `mvrs` (see [mvrs](https://journals.sagepub.com/doi/pdf/10.1177/1536867X0700700103)) , or manual implementation.\n",
        "\n",
        "-   Kernel regression possible. (as in Robinson 1988), but requires an iterative method. (back fitting algorithm)\n",
        "\n",
        "    -   $g(x) = smooth (y-g(z)|x)$, center $g(x)$ , and $g(z) = smooth (y-g(x)|z)$, center $g(z)$ until convergence\n",
        "\n",
        "-   In general, it can be easy to apply, but extra work required for marginal effects.\n",
        "\n",
        "## Smooth Coefficient model\n",
        "\n",
        "$$\n",
        "y = g_0(z)+g_1(z)x + e \n",
        "$$\n",
        "\n",
        "This model assumes that $X's$ have a locally linear effect on $y$, but that effect varies across values of $z$, in a non-parametric way.\n",
        "\n",
        "-   `fp` or manual implementation of basis functions, with interaction. May allow for multiple variables in $z$\n",
        "\n",
        "-   One can also use Local Kernel regressions. locally weighted regression where All X variables are considered fixed, or interacted with polynomials of Z. Choice of bandwidth problematic, but doable (LOOCV).\n",
        "\n",
        "    [vc_pack](https://journals.sagepub.com/doi/abs/10.1177/1536867X20953574) can estimate this models with a single z, as well as test it. Overall marginal effects still difficult to obtain.\n",
        "\n",
        "## Example\n",
        "\n",
        "```stata\n",
        "\n",
        "frause oaxaca\n",
        "vc_bw lnwage educ exper tenure female married divorced, vcoeff(age)\n",
        "vc_reg lnwage educ exper tenure female married divorced, vcoeff(age) k(20)\n",
        "ssc install addplot\n",
        "vc_graph educ exper tenure female married divorced, rarea\n",
        "addplot grph1:, legend(off) title(Education)\n",
        "addplot grph2:, legend(off) title(Experience)\n",
        "addplot grph3:, legend(off) title(Tenure)\n",
        "addplot grph4:, legend(off) title(Female)\n",
        "addplot grph5:, legend(off) title(Married)\n",
        "addplot grph6:, legend(off) title(Divorced)\n",
        "\n",
        "graph combine grph1 grph2 grph3 grph4 grph5 grph6\n",
        "```\n",
        "\n",
        "## Example\n",
        "\n",
        "![Wage Profile across years](resources/vc_plot.png){fig-align=\"center\"}\n",
        "\n",
        "# The end: Next time Quantile regressions"
      ],
      "id": "d3b843ea"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "nbstata",
      "language": "stata",
      "display_name": "Stata (nbstata)",
      "path": "C:\\Users\\Fernando\\AppData\\Roaming\\jupyter\\kernels\\nbstata"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}